---
- hosts: all
  tasks:

    - name: Rancher 2.x defaults
      include_vars:
        file: vars/rancher2/all.yaml

    - name: Rancher 2.x vars
      include_vars:
        file: vars/rancher2/ha-vars.yaml
      failed_when: NODE_PUBLIC_ADDRESS1 == none or
        NODE_PUBLIC_ADDRESS2 == none or
        NODE_PUBLIC_ADDRESS3 == none or
        NODE_INTERNAL_ADDRESS1 == none or
        NODE_INTERNAL_ADDRESS2 == none or
        NODE_INTERNAL_ADDRESS3 == none or
        RANCHER_HOSTNAME == none or ADMIN_EMAIL == none

    - name: Set Letsencrypt staging
      set_fact:
        LETSENCRYPT_SERVER: https://acme-staging-v02.api.letsencrypt.org/directory
      when: LETSENCRYPT_STAGE_OR_PROD == "staging"

    - name: Set Letsencrypt production
      set_fact:
        LETSENCRYPT_SERVER: https://acme-v02.api.letsencrypt.org/directory
      when: LETSENCRYPT_STAGE_OR_PROD == "production"

    - name: Create {{ rancher_cluster }} with external TLS
      copy:
        dest: "{{ rancher_cluster }}"
        content: |
          ---
          nodes:
            - address: {{ NODE_PUBLIC_ADDRESS }}
              internal_address: {{ NODE_INTERNAL_ADDRESS }}
              user: {{ NODE_USER }}
              role: [{{ node_role }}]

          services:
            etcd:
              snapshot: true
              creation: 6h
              retention: 24h

          # Required for external TLS termination with
          # ingress-nginx v0.22+
          ingress:
            provider: nginx
            options:
              use-forwarded-headers: "true"

          ssh_agent_auth: true
        force: yes
      when: USING_EXTERNAL_TLS

    - name: Create {{ rancher_cluster }} without external TLS
      copy:
        dest: "{{ rancher_cluster }}"
        content: |
          ---
          nodes:
            - address: {{ NODE_PUBLIC_ADDRESS }}
              internal_address: {{ NODE_INTERNAL_ADDRESS }}
              user: {{ NODE_USER }}
              role: [{{ node_role }}]

          services:
            etcd:
              snapshot: true
              creation: 6h
              retention: 24h

          ssh_agent_auth: true
        force: yes
      when: not USING_EXTERNAL_TLS

    - name: Create cluster (rke up --config {{ rancher_cluster }})
      shell: rke up --config {{ rancher_cluster }}

    - name: Copy rke kubeconfig to {{ kube_config_home }}
      copy:
        src: "{{ kubeconfig }}"
        dest: "{{ kube_config_home }}"
        force: yes

    - name: Create cert-manager namespace - {{ CERT_MANAGER_NAMESPACE }}
      shell: kubectl create namespace {{ CERT_MANAGER_NAMESPACE }}
      ignore_errors: yes

    - name: Install cert-manager {{ CERT_MANAGER_VERSION }} with regular manifests
      shell: kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/{{ CERT_MANAGER_VERSION }}/cert-manager.yaml
      when: CERT_MANAGER_INSTALL_TYPE == "manifests"

    - name: Install cert-manager {{ CERT_MANAGER_VERSION }} with helm 3
      shell: |
        # install CustomResourceDefinition resources
        kubectl apply -f https://raw.githubusercontent.com/jetstack/cert-manager/{{ CERT_MANAGER_VERSION }}/deploy/manifests/00-crds.yaml

        helm repo add jetstack https://charts.jetstack.io
        helm repo update

        helm install \
          cert-manager jetstack/cert-manager \
          --namespace {{ CERT_MANAGER_NAMESPACE }} \
          --version {{ CERT_MANAGER_VERSION }}
      when: CERT_MANAGER_INSTALL_TYPE == "helm"

    - name: Wait for cert-manager
      shell: kubectl -n cert-manager rollout status deploy/cert-manager
      register: kubectl
      until: kubectl.stdout == 'deployment "cert-manager" successfully rolled out'
      delay: 5
      retries: 50

    # https://cert-manager.io/docs/configuration/acme/
    - name: Create ACME {{ ACME_ISSUER_TYPE }}
      copy:
        dest: "{{ acme_issuer }}"
        content: |
          ---
          apiVersion: cert-manager.io/v1alpha2
          kind: {{ ACME_ISSUER_TYPE }}
          metadata:
            name: letsencrypt-{{ LETSENCRYPT_STAGE_OR_PROD }}
          spec:
            acme:
              # You must replace this email address with your own.
              # Let's Encrypt will use this to contact you about expiring
              # certificates, and issues related to your account.
              email: {{ ADMIN_EMAIL }}
              server: {{ LETSENCRYPT_SERVER }}
              privateKeySecretRef:
                # Secret resource used to store the account's private key.
                name: {{ acme_account_key }}
              # Add a single challenge solver, HTTP01 using nginx
              solvers:
                - http01:
                    serviceType: {{ ACME_SERVICE_TYPE }}
                    ingress:
                      class: nginx
#                - dns01:
#                    cloudflare:
#                      email: {{ CLOUDFLARE_EMAIL }}
#                      apiKeySecretRef:
#                        name: cloudflare-apikey-secret
#                        key: {{ CLOUDFLARE_APIKEY }}
#                  selector:
#                    dnsNames:
#                    - 'a.example.com'
#                    - 'b.example.com'
#                    dnsZones:
#                    - 'test.example.com'

        force: yes

    - name: Install ACME Issuer
      shell: kubectl apply --validate=false -f {{ acme_issuer }}
      register: acme
      until: '"failed calling webhook" not in acme.stderr'
      delay: 5
      retries: 50

    - name: Add rancher helm {{ RANCHER_VERSION }}
      shell: helm repo add rancher-{{ RANCHER_VERSION }} https://releases.rancher.com/server-charts/{{ RANCHER_VERSION }}

    - name: Create rancher namespace - {{ RANCHER_NAMESPACE }}
      shell: kubectl create namespace {{ RANCHER_NAMESPACE }}
      ignore_errors: yes

    - name: Install Rancher with Letsencrypt
      shell: |
        helm install rancher rancher-{{ RANCHER_VERSION }}/rancher \
          --namespace {{ RANCHER_NAMESPACE }} \
          --set hostname={{ RANCHER_HOSTNAME }} \
          --set ingress.tls.source=letsEncrypt \
          --set letsEncrypt.email={{ ADMIN_EMAIL }} \
          --set letsEncrypt.environment={{ LETSENCRYPT_STAGE_OR_PROD }}
      register: helm
      until: '"cannot re-use a name that is still in use" in helm.stderr'
      delay: 5
      retries: 10
      ignore_errors: yes

    - name: Scale rancher to {{ RANCHER_REPLICAS }}
      shell: kubectl scale -n {{ RANCHER_NAMESPACE }} deploy/rancher --replicas={{ RANCHER_REPLICAS }}

    - name: Wait for rancher
      shell: kubectl -n cattle-system rollout status deploy/rancher
      register: kubectl
      until: kubectl.stdout == 'deployment "rancher" successfully rolled out'
      delay: 5
      retries: 15

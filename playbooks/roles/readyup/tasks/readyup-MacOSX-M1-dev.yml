---
- set_fact:
    install: /tmp/readyup

- name: temp install
  file: path={{ install }} state=directory

- name: brew
  shell: |
    if ! which brew >/dev/null; then
      arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
  register: brew
  changed_when: "brew.rc != 0"

- name: install xcode
  shell: xcode-select --install
  register: xcode
  changed_when: "'command line tools are already installed' is not in xcode.stdout"
  failed_when: xcode.rc == 1
  ignore_errors: yes

# can't download from link
# link redirects to a session link
#- name: sshfs
#  shell: |
#    folder="sshfs"
#    pkg=sshfs.pkg
#    volume="/Volumes/$folder"
#    url=https://github.com/osxfuse/sshfs/releases/download/osxfuse-sshfs-2.5.0/sshfs-2.5.0.pkg
#
#    curl -o $pkg "$url"
#    installer -pkg "$volume/$pkg" -target /
#  become: yes

#- name: fing
#  shell: |
#    folder="fing"
#    pkg=Fing-5.5.2-osX.pkg
#    url=https://www.fing.com/images/uploads/general/CLI_macOSX_5.5.2.zip
#
#    curl -o /tmp/readyup/fing.zip "$url"
#    cd /tmp/readyup
#    unzip -o fing.zip
#    installer -pkg "$pkg" -target /
#  become: yes

#- name: vagrant (brew)
#  shell: arch -x86_64 brew install --cask vagrant

#- name: virtualbox
#  shell: arch -x86_64 brew install --cask virtualbox

#- name: vmware-fusion
#  shell: arch -x86_64 brew install --cask vmware-fusion

#- name: parallels
#  shell: arch -x86_64 brew install --cask parallels

- name: wget
  shell: arch -x86_64 brew install wget || arch -x86_64 brew upgrade wget

- name: fing
  shell: arch -x86_64 brew install fing || arch -x86_64 brew upgrade fing

- name: nmap
  shell: arch -x86_64 brew install nmap || arch -x86_64 brew upgrade nmap

# mount is not supported on MacOS when installed via Homebrew
#- name: rclone
#  shell: arch -x86_64 brew install rclone || arch -x86_64 brew upgrade rclone

- name: rclone
  block:
    - name: rclone
      set_fact:
        rclone_url: https://downloads.rclone.org/v1.54.0/rclone-v1.54.0-osx-amd64.zip
        rclone_ver: rclone-v1.54.0-osx-amd64
    - name: rclone download
      get_url:
        url: '{{rclone_url}}'
        dest: '{{install}}/rclone.zip'
        validate_certs: false
    - name: rclone unzip
      unarchive:
        src: '{{install}}/rclone.zip'
        dest: '{{install}}'
    - name: rclone install
      copy:
        src: '{{install}}/{{rclone_ver}}/rclone'
        dest: /usr/local/bin/rclone
        mode: '0755'

# this one is too old
#- name: osxfuse
#  shell: arch -x86_64 brew install --cask osxfuse || arch -x86_64 brew upgrade --cask osxfuse

- name: veracrypt
  shell: arch -x86_64 brew install --cask veracrypt || arch -x86_64 brew upgrade --cask veracrypt

- name: tmux
  shell: arch -x86_64 brew install tmux || arch -x86_64 brew upgrade tmux

- name: pass
  shell: arch -x86_64 brew install pass || arch -x86_64 brew upgrade pass

- name: pycharm-ce
  shell: arch -x86_64 brew install --cask --force pycharm-ce || arch -x86_64 brew upgrade --cask --force pycharm-ce

# You must install Rosetta 2 as some binaries are still Darwin/AMD64.
# To install Rosetta 2 manually from the command line, use this command:
#- name: docker Apple Silicon Tech Preview - fix
#  shell: softwareupdate --install-rosetta
#  become: yes
#
#- name: docker
#  shell: arch -x86_64 brew install --cask docker || arch -x86_64 brew upgrade --cask docker

#- name: wireshark
#  block:
#    - name: wireshark install
#      shell: arch -x86_64 brew install --cask wireshark
#      register: wireshark
#      failed_when: "'The install was successful' not in wireshark.stdout"
#      changed_when: "'The install was successful' not in wireshark.stdout"
#      ignore_errors: yes
#  rescue:
#    - name: wireshark upgrade
#      shell: arch -x86_64 brew upgrade wireshark
#      register: wireshark
#      failed_when: "'The upgrade was successful' not in wireshark.stdout"
#      changed_when: "'The upgrade was successful' not in wireshark.stdout"
#      ignore_errors: yes

- name: wireshark-chmodbpf
  block:
    - name: wireshark install
      shell: arch -x86_64 brew install --cask wireshark-chmodbpf
      register: wireshark
      ignore_errors: yes
  rescue:
    - name: wireshark upgrade
      shell: arch -x86_64 brew upgrade wireshark-chmodbpf
      register: wireshark
      ignore_errors: yes

- name: hashicorp
  block:
    - name: hashicorp
      set_fact:
        hashicorp_url: https://releases.hashicorp.com/vault/1.6.2/vault_1.6.2_darwin_amd64.zip
    - name: hashicorp download
      get_url:
        url: '{{hashicorp_url}}'
        dest: '{{install}}/hashicorp.zip'
        validate_certs: false
    - name: hashicorp unzip
      unarchive:
        src: '{{install}}/hashicorp.zip'
        dest: '{{install}}'
    - name: hashicorp install
      copy:
        src: '{{install}}/vault'
        dest: /usr/local/bin/vault
        mode: '0755'
      become: yes

- name: chrome m1
  shell: |
    folder="Google Chrome"
    app="Google Chrome.app"
    volume="/Volumes/$folder"
    url=https://dl.google.com/chrome/mac/universal/stable/GGRO/googlechrome.dmg
    # https://dl.google.com/chrome/mac/stable/GGRO/googlechrome.dmg

    hdiutil attach -nobrowse "$url"
    cp -R "$volume/$app" /Applications/
    hdiutil detach "$volume"

- name: gpg
  shell: |
    folder="GPG Suite"
    pkg=Install.pkg
    volume="/Volumes/$folder"
    url=https://releases.gpgtools.org/GPG_Suite-2020.2.dmg

    hdiutil attach -nobrowse "$url"
    installer -pkg "$volume/$pkg" -target /
    hdiutil detach "$volume"
  become: yes

- name: vagrant
  shell: |
    folder="Vagrant"
    pkg=vagrant.pkg
    volume="/Volumes/$folder"
    url=https://releases.hashicorp.com/vagrant/2.2.14/vagrant_2.2.14_x86_64.dmg

    hdiutil attach -nobrowse "$url"
    installer -pkg "$volume/$pkg" -target /
    hdiutil detach "$volume"
  become: yes
